name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  pre-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Instalar dependencias
        run: npm install

      - name: Dar permisos a ESLint
        run: chmod +x node_modules/.bin/eslint

      - name: Análisis estático con ESLint
        run: npx eslint .



      - name: Auditoría de dependencias con npm audit
        run: npm audit --audit-level=high || echo "Se encontraron vulnerabilidades, revisarlas en npm audit"

  build:
    needs: pre-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Instalar dependencias
        run: npm install

      - name: Compilar el código fuente (si aplica)
        run: echo "Compilación en Node.js lista"

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Instalar dependencias
        run: npm install

      - name: Dar permisos a Jest
        run: chmod +x node_modules/.bin/jest

      - name: Ejecutar pruebas unitarias con Jest
        run: npx jest

      - name: Ejecutar pruebas de integración con Selenium
        run: echo "Pruebas de integración con Selenium pendientes de implementación"

      - name: Escaneo de vulnerabilidades con Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'node:18'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true

      - name: Analizar código con SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: 'https://sonarcloud.io'
        with:
          args: >
            -Dsonar.organization=galof2002
            -Dsonar.projectKey=GaLoF2002_login-express
            -Dsonar.branch.name=main

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Instalar Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Instalar Trivy
        run: sudo apt-get install -y wget && wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add - && echo "deb https://aquasecurity.github.io/trivy-repo/deb focal main" | sudo tee -a /etc/apt/sources.list.d/trivy.list && sudo apt-get update && sudo apt-get install -y trivy


      - name: Construir y levantar contenedores con Docker Compose
        run: docker-compose up -d

      - name: Esperar a que los contenedores estén listos
        run: sleep 10

      - name: Verificar estado de los contenedores
        run: docker ps

      - name: Escaneo continuo de contenedores en ejecución con Trivy
        run: trivy image --severity HIGH,CRITICAL --format table --timeout 5m --exit-code 1 node:18


      - name: Validaciones de despliegue
        run: echo "Ejecutando validaciones de seguridad..."

      - name: Desplegar en producción simulada
        run: echo "Despliegue exitoso en producción simulada."
